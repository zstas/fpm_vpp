// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fpm/fpm.proto

#include "fpm/fpm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_fpm_2ffpm_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_fpm_2ffpm_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DeleteRoute;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_fpm_2ffpm_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RouteKey;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_fpm_2ffpm_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_AddRoute;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_fpm_2ffpm_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Nexthop;
}  // namespace protobuf_fpm_2ffpm_2eproto
namespace protobuf_qpb_2fqpb_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_qpb_2fqpb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_IfIdentifier;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_qpb_2fqpb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_L3Prefix;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_qpb_2fqpb_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_L3Address;
}  // namespace protobuf_qpb_2fqpb_2eproto
namespace fpm {
class NexthopDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Nexthop>
      _instance;
} _Nexthop_default_instance_;
class RouteKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RouteKey>
      _instance;
} _RouteKey_default_instance_;
class DeleteRouteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteRoute>
      _instance;
} _DeleteRoute_default_instance_;
class AddRouteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddRoute>
      _instance;
} _AddRoute_default_instance_;
class MessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Message>
      _instance;
} _Message_default_instance_;
}  // namespace fpm
namespace protobuf_fpm_2ffpm_2eproto {
static void InitDefaultsNexthop() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fpm::_Nexthop_default_instance_;
    new (ptr) ::fpm::Nexthop();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fpm::Nexthop::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Nexthop =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsNexthop}, {
      &protobuf_qpb_2fqpb_2eproto::scc_info_IfIdentifier.base,
      &protobuf_qpb_2fqpb_2eproto::scc_info_L3Address.base,}};

static void InitDefaultsRouteKey() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fpm::_RouteKey_default_instance_;
    new (ptr) ::fpm::RouteKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fpm::RouteKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RouteKey =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRouteKey}, {
      &protobuf_qpb_2fqpb_2eproto::scc_info_L3Prefix.base,}};

static void InitDefaultsDeleteRoute() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fpm::_DeleteRoute_default_instance_;
    new (ptr) ::fpm::DeleteRoute();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fpm::DeleteRoute::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DeleteRoute =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDeleteRoute}, {
      &protobuf_fpm_2ffpm_2eproto::scc_info_RouteKey.base,}};

static void InitDefaultsAddRoute() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fpm::_AddRoute_default_instance_;
    new (ptr) ::fpm::AddRoute();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fpm::AddRoute::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AddRoute =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAddRoute}, {
      &protobuf_fpm_2ffpm_2eproto::scc_info_RouteKey.base,
      &protobuf_fpm_2ffpm_2eproto::scc_info_Nexthop.base,}};

static void InitDefaultsMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fpm::_Message_default_instance_;
    new (ptr) ::fpm::Message();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fpm::Message::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Message =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMessage}, {
      &protobuf_fpm_2ffpm_2eproto::scc_info_AddRoute.base,
      &protobuf_fpm_2ffpm_2eproto::scc_info_DeleteRoute.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Nexthop.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RouteKey.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteRoute.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddRoute.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Message.base);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fpm::Nexthop, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fpm::Nexthop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fpm::Nexthop, if_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fpm::Nexthop, address_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fpm::RouteKey, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fpm::RouteKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fpm::RouteKey, prefix_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fpm::DeleteRoute, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fpm::DeleteRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fpm::DeleteRoute, vrf_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fpm::DeleteRoute, address_family_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fpm::DeleteRoute, sub_address_family_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fpm::DeleteRoute, key_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fpm::AddRoute, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fpm::AddRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fpm::AddRoute, vrf_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fpm::AddRoute, address_family_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fpm::AddRoute, sub_address_family_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fpm::AddRoute, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fpm::AddRoute, route_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fpm::AddRoute, protocol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fpm::AddRoute, metric_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fpm::AddRoute, nexthops_),
  1,
  2,
  3,
  0,
  4,
  5,
  6,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fpm::Message, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fpm::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fpm::Message, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fpm::Message, add_route_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fpm::Message, delete_route_),
  2,
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::fpm::Nexthop)},
  { 9, 15, sizeof(::fpm::RouteKey)},
  { 16, 25, sizeof(::fpm::DeleteRoute)},
  { 29, 42, sizeof(::fpm::AddRoute)},
  { 50, 58, sizeof(::fpm::Message)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::fpm::_Nexthop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fpm::_RouteKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fpm::_DeleteRoute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fpm::_AddRoute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fpm::_Message_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "fpm/fpm.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rfpm/fpm.proto\022\003fpm\032\rqpb/qpb.proto\"L\n\007N"
      "exthop\022 \n\005if_id\030\002 \001(\0132\021.qpb.IfIdentifier"
      "\022\037\n\007address\030\003 \001(\0132\016.qpb.L3Address\")\n\010Rou"
      "teKey\022\035\n\006prefix\030\001 \001(\0132\r.qpb.L3Prefix\"\230\001\n"
      "\013DeleteRoute\022\016\n\006vrf_id\030\001 \002(\r\022*\n\016address_"
      "family\030\002 \002(\0162\022.qpb.AddressFamily\0221\n\022sub_"
      "address_family\030\003 \002(\0162\025.qpb.SubAddressFam"
      "ily\022\032\n\003key\030\004 \002(\0132\r.fpm.RouteKey\"\212\002\n\010AddR"
      "oute\022\016\n\006vrf_id\030\001 \002(\r\022*\n\016address_family\030\002"
      " \002(\0162\022.qpb.AddressFamily\0221\n\022sub_address_"
      "family\030\003 \002(\0162\025.qpb.SubAddressFamily\022\032\n\003k"
      "ey\030\004 \002(\0132\r.fpm.RouteKey\022\"\n\nroute_type\030\005 "
      "\001(\0162\016.fpm.RouteType\022\037\n\010protocol\030\006 \002(\0162\r."
      "qpb.Protocol\022\016\n\006metric\030\010 \002(\005\022\036\n\010nexthops"
      "\030\t \003(\0132\014.fpm.Nexthop\"\256\001\n\007Message\022\037\n\004type"
      "\030\001 \001(\0162\021.fpm.Message.Type\022 \n\tadd_route\030\002"
      " \001(\0132\r.fpm.AddRoute\022&\n\014delete_route\030\003 \001("
      "\0132\020.fpm.DeleteRoute\"8\n\004Type\022\017\n\013UNKNOWN_M"
      "SG\020\000\022\r\n\tADD_ROUTE\020\001\022\020\n\014DELETE_ROUTE\020\002*D\n"
      "\tRouteType\022\013\n\007UNKNOWN\020\000\022\n\n\006NORMAL\020\001\022\017\n\013U"
      "NREACHABLE\020\002\022\r\n\tBLACKHOLE\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 827);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fpm/fpm.proto", &protobuf_RegisterTypes);
  ::protobuf_qpb_2fqpb_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_fpm_2ffpm_2eproto
namespace fpm {
const ::google::protobuf::EnumDescriptor* Message_Type_descriptor() {
  protobuf_fpm_2ffpm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fpm_2ffpm_2eproto::file_level_enum_descriptors[0];
}
bool Message_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Message_Type Message::UNKNOWN_MSG;
const Message_Type Message::ADD_ROUTE;
const Message_Type Message::DELETE_ROUTE;
const Message_Type Message::Type_MIN;
const Message_Type Message::Type_MAX;
const int Message::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RouteType_descriptor() {
  protobuf_fpm_2ffpm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fpm_2ffpm_2eproto::file_level_enum_descriptors[1];
}
bool RouteType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Nexthop::InitAsDefaultInstance() {
  ::fpm::_Nexthop_default_instance_._instance.get_mutable()->if_id_ = const_cast< ::qpb::IfIdentifier*>(
      ::qpb::IfIdentifier::internal_default_instance());
  ::fpm::_Nexthop_default_instance_._instance.get_mutable()->address_ = const_cast< ::qpb::L3Address*>(
      ::qpb::L3Address::internal_default_instance());
}
void Nexthop::clear_if_id() {
  if (if_id_ != NULL) if_id_->Clear();
  clear_has_if_id();
}
void Nexthop::clear_address() {
  if (address_ != NULL) address_->Clear();
  clear_has_address();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Nexthop::kIfIdFieldNumber;
const int Nexthop::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Nexthop::Nexthop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_fpm_2ffpm_2eproto::scc_info_Nexthop.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fpm.Nexthop)
}
Nexthop::Nexthop(const Nexthop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_if_id()) {
    if_id_ = new ::qpb::IfIdentifier(*from.if_id_);
  } else {
    if_id_ = NULL;
  }
  if (from.has_address()) {
    address_ = new ::qpb::L3Address(*from.address_);
  } else {
    address_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:fpm.Nexthop)
}

void Nexthop::SharedCtor() {
  ::memset(&if_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&address_) -
      reinterpret_cast<char*>(&if_id_)) + sizeof(address_));
}

Nexthop::~Nexthop() {
  // @@protoc_insertion_point(destructor:fpm.Nexthop)
  SharedDtor();
}

void Nexthop::SharedDtor() {
  if (this != internal_default_instance()) delete if_id_;
  if (this != internal_default_instance()) delete address_;
}

void Nexthop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Nexthop::descriptor() {
  ::protobuf_fpm_2ffpm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fpm_2ffpm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Nexthop& Nexthop::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_fpm_2ffpm_2eproto::scc_info_Nexthop.base);
  return *internal_default_instance();
}


void Nexthop::Clear() {
// @@protoc_insertion_point(message_clear_start:fpm.Nexthop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(if_id_ != NULL);
      if_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(address_ != NULL);
      address_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Nexthop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fpm.Nexthop)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .qpb.IfIdentifier if_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_if_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qpb.L3Address address = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fpm.Nexthop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fpm.Nexthop)
  return false;
#undef DO_
}

void Nexthop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fpm.Nexthop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .qpb.IfIdentifier if_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_if_id(), output);
  }

  // optional .qpb.L3Address address = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fpm.Nexthop)
}

::google::protobuf::uint8* Nexthop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fpm.Nexthop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .qpb.IfIdentifier if_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_if_id(), deterministic, target);
  }

  // optional .qpb.L3Address address = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_address(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fpm.Nexthop)
  return target;
}

size_t Nexthop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fpm.Nexthop)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .qpb.IfIdentifier if_id = 2;
    if (has_if_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *if_id_);
    }

    // optional .qpb.L3Address address = 3;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *address_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Nexthop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fpm.Nexthop)
  GOOGLE_DCHECK_NE(&from, this);
  const Nexthop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Nexthop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fpm.Nexthop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fpm.Nexthop)
    MergeFrom(*source);
  }
}

void Nexthop::MergeFrom(const Nexthop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fpm.Nexthop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_if_id()->::qpb::IfIdentifier::MergeFrom(from.if_id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_address()->::qpb::L3Address::MergeFrom(from.address());
    }
  }
}

void Nexthop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fpm.Nexthop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Nexthop::CopyFrom(const Nexthop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fpm.Nexthop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Nexthop::IsInitialized() const {
  if (has_address()) {
    if (!this->address_->IsInitialized()) return false;
  }
  return true;
}

void Nexthop::Swap(Nexthop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Nexthop::InternalSwap(Nexthop* other) {
  using std::swap;
  swap(if_id_, other->if_id_);
  swap(address_, other->address_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Nexthop::GetMetadata() const {
  protobuf_fpm_2ffpm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fpm_2ffpm_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RouteKey::InitAsDefaultInstance() {
  ::fpm::_RouteKey_default_instance_._instance.get_mutable()->prefix_ = const_cast< ::qpb::L3Prefix*>(
      ::qpb::L3Prefix::internal_default_instance());
}
void RouteKey::clear_prefix() {
  if (prefix_ != NULL) prefix_->Clear();
  clear_has_prefix();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouteKey::kPrefixFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouteKey::RouteKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_fpm_2ffpm_2eproto::scc_info_RouteKey.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fpm.RouteKey)
}
RouteKey::RouteKey(const RouteKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_prefix()) {
    prefix_ = new ::qpb::L3Prefix(*from.prefix_);
  } else {
    prefix_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:fpm.RouteKey)
}

void RouteKey::SharedCtor() {
  prefix_ = NULL;
}

RouteKey::~RouteKey() {
  // @@protoc_insertion_point(destructor:fpm.RouteKey)
  SharedDtor();
}

void RouteKey::SharedDtor() {
  if (this != internal_default_instance()) delete prefix_;
}

void RouteKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RouteKey::descriptor() {
  ::protobuf_fpm_2ffpm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fpm_2ffpm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RouteKey& RouteKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_fpm_2ffpm_2eproto::scc_info_RouteKey.base);
  return *internal_default_instance();
}


void RouteKey::Clear() {
// @@protoc_insertion_point(message_clear_start:fpm.RouteKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(prefix_ != NULL);
    prefix_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RouteKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fpm.RouteKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .qpb.L3Prefix prefix = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_prefix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fpm.RouteKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fpm.RouteKey)
  return false;
#undef DO_
}

void RouteKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fpm.RouteKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .qpb.L3Prefix prefix = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_prefix(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fpm.RouteKey)
}

::google::protobuf::uint8* RouteKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fpm.RouteKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .qpb.L3Prefix prefix = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_prefix(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fpm.RouteKey)
  return target;
}

size_t RouteKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fpm.RouteKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .qpb.L3Prefix prefix = 1;
  if (has_prefix()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *prefix_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fpm.RouteKey)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RouteKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fpm.RouteKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fpm.RouteKey)
    MergeFrom(*source);
  }
}

void RouteKey::MergeFrom(const RouteKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fpm.RouteKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_prefix()) {
    mutable_prefix()->::qpb::L3Prefix::MergeFrom(from.prefix());
  }
}

void RouteKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fpm.RouteKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteKey::CopyFrom(const RouteKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fpm.RouteKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteKey::IsInitialized() const {
  if (has_prefix()) {
    if (!this->prefix_->IsInitialized()) return false;
  }
  return true;
}

void RouteKey::Swap(RouteKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouteKey::InternalSwap(RouteKey* other) {
  using std::swap;
  swap(prefix_, other->prefix_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RouteKey::GetMetadata() const {
  protobuf_fpm_2ffpm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fpm_2ffpm_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeleteRoute::InitAsDefaultInstance() {
  ::fpm::_DeleteRoute_default_instance_._instance.get_mutable()->key_ = const_cast< ::fpm::RouteKey*>(
      ::fpm::RouteKey::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteRoute::kVrfIdFieldNumber;
const int DeleteRoute::kAddressFamilyFieldNumber;
const int DeleteRoute::kSubAddressFamilyFieldNumber;
const int DeleteRoute::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteRoute::DeleteRoute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_fpm_2ffpm_2eproto::scc_info_DeleteRoute.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fpm.DeleteRoute)
}
DeleteRoute::DeleteRoute(const DeleteRoute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_key()) {
    key_ = new ::fpm::RouteKey(*from.key_);
  } else {
    key_ = NULL;
  }
  ::memcpy(&vrf_id_, &from.vrf_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sub_address_family_) -
    reinterpret_cast<char*>(&vrf_id_)) + sizeof(sub_address_family_));
  // @@protoc_insertion_point(copy_constructor:fpm.DeleteRoute)
}

void DeleteRoute::SharedCtor() {
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sub_address_family_) -
      reinterpret_cast<char*>(&key_)) + sizeof(sub_address_family_));
}

DeleteRoute::~DeleteRoute() {
  // @@protoc_insertion_point(destructor:fpm.DeleteRoute)
  SharedDtor();
}

void DeleteRoute::SharedDtor() {
  if (this != internal_default_instance()) delete key_;
}

void DeleteRoute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DeleteRoute::descriptor() {
  ::protobuf_fpm_2ffpm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fpm_2ffpm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteRoute& DeleteRoute::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_fpm_2ffpm_2eproto::scc_info_DeleteRoute.base);
  return *internal_default_instance();
}


void DeleteRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:fpm.DeleteRoute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(key_ != NULL);
    key_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&vrf_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sub_address_family_) -
        reinterpret_cast<char*>(&vrf_id_)) + sizeof(sub_address_family_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeleteRoute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fpm.DeleteRoute)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 vrf_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_vrf_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vrf_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .qpb.AddressFamily address_family = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::qpb::AddressFamily_IsValid(value)) {
            set_address_family(static_cast< ::qpb::AddressFamily >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .qpb.SubAddressFamily sub_address_family = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::qpb::SubAddressFamily_IsValid(value)) {
            set_sub_address_family(static_cast< ::qpb::SubAddressFamily >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .fpm.RouteKey key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fpm.DeleteRoute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fpm.DeleteRoute)
  return false;
#undef DO_
}

void DeleteRoute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fpm.DeleteRoute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 vrf_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vrf_id(), output);
  }

  // required .qpb.AddressFamily address_family = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->address_family(), output);
  }

  // required .qpb.SubAddressFamily sub_address_family = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->sub_address_family(), output);
  }

  // required .fpm.RouteKey key = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fpm.DeleteRoute)
}

::google::protobuf::uint8* DeleteRoute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fpm.DeleteRoute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 vrf_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->vrf_id(), target);
  }

  // required .qpb.AddressFamily address_family = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->address_family(), target);
  }

  // required .qpb.SubAddressFamily sub_address_family = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->sub_address_family(), target);
  }

  // required .fpm.RouteKey key = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_key(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fpm.DeleteRoute)
  return target;
}

size_t DeleteRoute::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fpm.DeleteRoute)
  size_t total_size = 0;

  if (has_key()) {
    // required .fpm.RouteKey key = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *key_);
  }

  if (has_vrf_id()) {
    // required uint32 vrf_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vrf_id());
  }

  if (has_address_family()) {
    // required .qpb.AddressFamily address_family = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->address_family());
  }

  if (has_sub_address_family()) {
    // required .qpb.SubAddressFamily sub_address_family = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sub_address_family());
  }

  return total_size;
}
size_t DeleteRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fpm.DeleteRoute)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .fpm.RouteKey key = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *key_);

    // required uint32 vrf_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vrf_id());

    // required .qpb.AddressFamily address_family = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->address_family());

    // required .qpb.SubAddressFamily sub_address_family = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sub_address_family());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteRoute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fpm.DeleteRoute)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteRoute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteRoute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fpm.DeleteRoute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fpm.DeleteRoute)
    MergeFrom(*source);
  }
}

void DeleteRoute::MergeFrom(const DeleteRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fpm.DeleteRoute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_key()->::fpm::RouteKey::MergeFrom(from.key());
    }
    if (cached_has_bits & 0x00000002u) {
      vrf_id_ = from.vrf_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      address_family_ = from.address_family_;
    }
    if (cached_has_bits & 0x00000008u) {
      sub_address_family_ = from.sub_address_family_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeleteRoute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fpm.DeleteRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRoute::CopyFrom(const DeleteRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fpm.DeleteRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRoute::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_key()) {
    if (!this->key_->IsInitialized()) return false;
  }
  return true;
}

void DeleteRoute::Swap(DeleteRoute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteRoute::InternalSwap(DeleteRoute* other) {
  using std::swap;
  swap(key_, other->key_);
  swap(vrf_id_, other->vrf_id_);
  swap(address_family_, other->address_family_);
  swap(sub_address_family_, other->sub_address_family_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeleteRoute::GetMetadata() const {
  protobuf_fpm_2ffpm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fpm_2ffpm_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddRoute::InitAsDefaultInstance() {
  ::fpm::_AddRoute_default_instance_._instance.get_mutable()->key_ = const_cast< ::fpm::RouteKey*>(
      ::fpm::RouteKey::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddRoute::kVrfIdFieldNumber;
const int AddRoute::kAddressFamilyFieldNumber;
const int AddRoute::kSubAddressFamilyFieldNumber;
const int AddRoute::kKeyFieldNumber;
const int AddRoute::kRouteTypeFieldNumber;
const int AddRoute::kProtocolFieldNumber;
const int AddRoute::kMetricFieldNumber;
const int AddRoute::kNexthopsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddRoute::AddRoute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_fpm_2ffpm_2eproto::scc_info_AddRoute.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fpm.AddRoute)
}
AddRoute::AddRoute(const AddRoute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      nexthops_(from.nexthops_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_key()) {
    key_ = new ::fpm::RouteKey(*from.key_);
  } else {
    key_ = NULL;
  }
  ::memcpy(&vrf_id_, &from.vrf_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&metric_) -
    reinterpret_cast<char*>(&vrf_id_)) + sizeof(metric_));
  // @@protoc_insertion_point(copy_constructor:fpm.AddRoute)
}

void AddRoute::SharedCtor() {
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metric_) -
      reinterpret_cast<char*>(&key_)) + sizeof(metric_));
}

AddRoute::~AddRoute() {
  // @@protoc_insertion_point(destructor:fpm.AddRoute)
  SharedDtor();
}

void AddRoute::SharedDtor() {
  if (this != internal_default_instance()) delete key_;
}

void AddRoute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AddRoute::descriptor() {
  ::protobuf_fpm_2ffpm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fpm_2ffpm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddRoute& AddRoute::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_fpm_2ffpm_2eproto::scc_info_AddRoute.base);
  return *internal_default_instance();
}


void AddRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:fpm.AddRoute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nexthops_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(key_ != NULL);
    key_->Clear();
  }
  if (cached_has_bits & 126u) {
    ::memset(&vrf_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&metric_) -
        reinterpret_cast<char*>(&vrf_id_)) + sizeof(metric_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddRoute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fpm.AddRoute)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 vrf_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_vrf_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vrf_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .qpb.AddressFamily address_family = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::qpb::AddressFamily_IsValid(value)) {
            set_address_family(static_cast< ::qpb::AddressFamily >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .qpb.SubAddressFamily sub_address_family = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::qpb::SubAddressFamily_IsValid(value)) {
            set_sub_address_family(static_cast< ::qpb::SubAddressFamily >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .fpm.RouteKey key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fpm.RouteType route_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fpm::RouteType_IsValid(value)) {
            set_route_type(static_cast< ::fpm::RouteType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .qpb.Protocol protocol = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::qpb::Protocol_IsValid(value)) {
            set_protocol(static_cast< ::qpb::Protocol >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 metric = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_metric();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &metric_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fpm.Nexthop nexthops = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_nexthops()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fpm.AddRoute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fpm.AddRoute)
  return false;
#undef DO_
}

void AddRoute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fpm.AddRoute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 vrf_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vrf_id(), output);
  }

  // required .qpb.AddressFamily address_family = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->address_family(), output);
  }

  // required .qpb.SubAddressFamily sub_address_family = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->sub_address_family(), output);
  }

  // required .fpm.RouteKey key = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_key(), output);
  }

  // optional .fpm.RouteType route_type = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->route_type(), output);
  }

  // required .qpb.Protocol protocol = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->protocol(), output);
  }

  // required int32 metric = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->metric(), output);
  }

  // repeated .fpm.Nexthop nexthops = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nexthops_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->nexthops(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fpm.AddRoute)
}

::google::protobuf::uint8* AddRoute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fpm.AddRoute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 vrf_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->vrf_id(), target);
  }

  // required .qpb.AddressFamily address_family = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->address_family(), target);
  }

  // required .qpb.SubAddressFamily sub_address_family = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->sub_address_family(), target);
  }

  // required .fpm.RouteKey key = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_key(), deterministic, target);
  }

  // optional .fpm.RouteType route_type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->route_type(), target);
  }

  // required .qpb.Protocol protocol = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->protocol(), target);
  }

  // required int32 metric = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->metric(), target);
  }

  // repeated .fpm.Nexthop nexthops = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nexthops_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->nexthops(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fpm.AddRoute)
  return target;
}

size_t AddRoute::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fpm.AddRoute)
  size_t total_size = 0;

  if (has_key()) {
    // required .fpm.RouteKey key = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *key_);
  }

  if (has_vrf_id()) {
    // required uint32 vrf_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vrf_id());
  }

  if (has_address_family()) {
    // required .qpb.AddressFamily address_family = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->address_family());
  }

  if (has_sub_address_family()) {
    // required .qpb.SubAddressFamily sub_address_family = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sub_address_family());
  }

  if (has_protocol()) {
    // required .qpb.Protocol protocol = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol());
  }

  if (has_metric()) {
    // required int32 metric = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->metric());
  }

  return total_size;
}
size_t AddRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fpm.AddRoute)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000006f) ^ 0x0000006f) == 0) {  // All required fields are present.
    // required .fpm.RouteKey key = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *key_);

    // required uint32 vrf_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vrf_id());

    // required .qpb.AddressFamily address_family = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->address_family());

    // required .qpb.SubAddressFamily sub_address_family = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sub_address_family());

    // required .qpb.Protocol protocol = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol());

    // required int32 metric = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->metric());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .fpm.Nexthop nexthops = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->nexthops_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nexthops(static_cast<int>(i)));
    }
  }

  // optional .fpm.RouteType route_type = 5;
  if (has_route_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->route_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddRoute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fpm.AddRoute)
  GOOGLE_DCHECK_NE(&from, this);
  const AddRoute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddRoute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fpm.AddRoute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fpm.AddRoute)
    MergeFrom(*source);
  }
}

void AddRoute::MergeFrom(const AddRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fpm.AddRoute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nexthops_.MergeFrom(from.nexthops_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_key()->::fpm::RouteKey::MergeFrom(from.key());
    }
    if (cached_has_bits & 0x00000002u) {
      vrf_id_ = from.vrf_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      address_family_ = from.address_family_;
    }
    if (cached_has_bits & 0x00000008u) {
      sub_address_family_ = from.sub_address_family_;
    }
    if (cached_has_bits & 0x00000010u) {
      route_type_ = from.route_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      protocol_ = from.protocol_;
    }
    if (cached_has_bits & 0x00000040u) {
      metric_ = from.metric_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddRoute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fpm.AddRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRoute::CopyFrom(const AddRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fpm.AddRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRoute::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000006f) != 0x0000006f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->nexthops())) return false;
  if (has_key()) {
    if (!this->key_->IsInitialized()) return false;
  }
  return true;
}

void AddRoute::Swap(AddRoute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddRoute::InternalSwap(AddRoute* other) {
  using std::swap;
  CastToBase(&nexthops_)->InternalSwap(CastToBase(&other->nexthops_));
  swap(key_, other->key_);
  swap(vrf_id_, other->vrf_id_);
  swap(address_family_, other->address_family_);
  swap(sub_address_family_, other->sub_address_family_);
  swap(route_type_, other->route_type_);
  swap(protocol_, other->protocol_);
  swap(metric_, other->metric_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddRoute::GetMetadata() const {
  protobuf_fpm_2ffpm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fpm_2ffpm_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Message::InitAsDefaultInstance() {
  ::fpm::_Message_default_instance_._instance.get_mutable()->add_route_ = const_cast< ::fpm::AddRoute*>(
      ::fpm::AddRoute::internal_default_instance());
  ::fpm::_Message_default_instance_._instance.get_mutable()->delete_route_ = const_cast< ::fpm::DeleteRoute*>(
      ::fpm::DeleteRoute::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kTypeFieldNumber;
const int Message::kAddRouteFieldNumber;
const int Message::kDeleteRouteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_fpm_2ffpm_2eproto::scc_info_Message.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fpm.Message)
}
Message::Message(const Message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_add_route()) {
    add_route_ = new ::fpm::AddRoute(*from.add_route_);
  } else {
    add_route_ = NULL;
  }
  if (from.has_delete_route()) {
    delete_route_ = new ::fpm::DeleteRoute(*from.delete_route_);
  } else {
    delete_route_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:fpm.Message)
}

void Message::SharedCtor() {
  ::memset(&add_route_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&add_route_)) + sizeof(type_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:fpm.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != internal_default_instance()) delete add_route_;
  if (this != internal_default_instance()) delete delete_route_;
}

void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  ::protobuf_fpm_2ffpm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fpm_2ffpm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Message& Message::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_fpm_2ffpm_2eproto::scc_info_Message.base);
  return *internal_default_instance();
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:fpm.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(add_route_ != NULL);
      add_route_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(delete_route_ != NULL);
      delete_route_->Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fpm.Message)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fpm.Message.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fpm::Message_Type_IsValid(value)) {
            set_type(static_cast< ::fpm::Message_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fpm.AddRoute add_route = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_add_route()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fpm.DeleteRoute delete_route = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_delete_route()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fpm.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fpm.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fpm.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fpm.Message.Type type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .fpm.AddRoute add_route = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_add_route(), output);
  }

  // optional .fpm.DeleteRoute delete_route = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_delete_route(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fpm.Message)
}

::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fpm.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fpm.Message.Type type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .fpm.AddRoute add_route = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_add_route(), deterministic, target);
  }

  // optional .fpm.DeleteRoute delete_route = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_delete_route(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fpm.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fpm.Message)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .fpm.AddRoute add_route = 2;
    if (has_add_route()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *add_route_);
    }

    // optional .fpm.DeleteRoute delete_route = 3;
    if (has_delete_route()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *delete_route_);
    }

    // optional .fpm.Message.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fpm.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fpm.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fpm.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fpm.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_add_route()->::fpm::AddRoute::MergeFrom(from.add_route());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_delete_route()->::fpm::DeleteRoute::MergeFrom(from.delete_route());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fpm.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fpm.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if (has_add_route()) {
    if (!this->add_route_->IsInitialized()) return false;
  }
  if (has_delete_route()) {
    if (!this->delete_route_->IsInitialized()) return false;
  }
  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  using std::swap;
  swap(add_route_, other->add_route_);
  swap(delete_route_, other->delete_route_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_fpm_2ffpm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fpm_2ffpm_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fpm
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fpm::Nexthop* Arena::CreateMaybeMessage< ::fpm::Nexthop >(Arena* arena) {
  return Arena::CreateInternal< ::fpm::Nexthop >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fpm::RouteKey* Arena::CreateMaybeMessage< ::fpm::RouteKey >(Arena* arena) {
  return Arena::CreateInternal< ::fpm::RouteKey >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fpm::DeleteRoute* Arena::CreateMaybeMessage< ::fpm::DeleteRoute >(Arena* arena) {
  return Arena::CreateInternal< ::fpm::DeleteRoute >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fpm::AddRoute* Arena::CreateMaybeMessage< ::fpm::AddRoute >(Arena* arena) {
  return Arena::CreateInternal< ::fpm::AddRoute >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fpm::Message* Arena::CreateMaybeMessage< ::fpm::Message >(Arena* arena) {
  return Arena::CreateInternal< ::fpm::Message >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
